name: Build Components

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      environment:
        required: true
        type: string
        description: 'Either "development" or "production"'
    secrets:
      AWS_OIDC_ROLE_ARN:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      ELECTRON_S3_BUCKET:
        required: true
      APPLE_CSC_SECRET_NAME:
        required: true
      APPLE_ID:
        required: true
      APPLE_APP_SPECIFIC_PASSWORD:
        required: true
      POSTHOG_HOST:
        required: true
      POSTHOG_KEY:
        required: true
      LANGFUSE_SECRET_KEY:
        required: true
      LANGFUSE_PUBLIC_KEY:
        required: true
      LANGFUSE_BASE_URL: 
        required: true

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Restore Frontend Cache
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-npm-${{ github.ref_name }}-${{ hashFiles('ui/package-lock.json') }}

      - name: Build Frontend
        working-directory: ui
        run: |
          if [[ "${{ inputs.environment }}" == "development" ]]; then
            npm run build:dev
          else
            npm run build:prod
          fi

      - name: Upload Frontend Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ui/dist/

  build_electron_windows:
    needs: [build_frontend]
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Short Commit SHA
        id: get-sha
        shell: pwsh
        run: |
          $COMMIT_SHA = (git rev-parse --short HEAD) 2>$null
          if (-not $COMMIT_SHA) {
            $COMMIT_SHA = $env:GITHUB_SHA.Substring(0,7)
          }
          echo "COMMIT_SHA=$COMMIT_SHA" >> $env:GITHUB_OUTPUT
          echo "Using short commit SHA: $COMMIT_SHA"

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ui/dist/

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ui electron/

      - name: Install Dependencies and Build Electron
        shell: cmd
        run: |
          cd electron

          # Create .env file with PostHog configuration
          echo POSTHOG_HOST=%POSTHOG_HOST% >> .env
          echo POSTHOG_KEY=%POSTHOG_KEY% >> .env
          echo LANGFUSE_SECRET_KEY=%LANGFUSE_SECRET_KEY% >> .env
          echo LANGFUSE_PUBLIC_KEY=%LANGFUSE_PUBLIC_KEY% >> .env
          echo LANGFUSE_BASE_URL=%LANGFUSE_BASE_URL% >> .env

          npm install
          npm run build
          npm run package:win
        env:
          POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
          LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_BASE_URL: ${{ secrets.LANGFUSE_BASE_URL }}

      - name: Package Windows Build
        run: |
          cd electron
          $VERSION = (node -e "console.log(require('./package.json').version);" | Out-String).Trim()
          Compress-Archive -Path dist/win-unpacked/* -DestinationPath win-unpacked.zip

          # Upload to S3 for long-term storage
          aws s3 cp win-unpacked.zip s3://${{ secrets.ELECTRON_S3_BUCKET }}/github-actions/${{ inputs.environment }}/windows/$VERSION/${{steps.get-sha.outputs.COMMIT_SHA}}/win-unpacked.zip
          aws s3 cp dist/latest.yml s3://${{ secrets.ELECTRON_S3_BUCKET }}/github-actions/${{ inputs.environment }}/windows/$VERSION/${{steps.get-sha.outputs.COMMIT_SHA}}/latest.yml

      - name: Upload Windows Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-electron-build
          path: |
            electron/win-unpacked.zip
            electron/dist/latest.yml
          retention-days: 90

  build_electron_mac:
    needs: [build_frontend]
    runs-on: macos-15
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Short Commit SHA
        id: get-sha
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD || echo "${GITHUB_SHA:0:7}")
          echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "Using short commit SHA: ${COMMIT_SHA}"

      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-session-name: GitHubActions-${{ github.event.repository.name }}-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ui/dist/

      - name: Fetch Apple Developer Certificate
        run: |
          CSC_DATA=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.APPLE_CSC_SECRET_NAME }} --query SecretString --output text)
          echo "::add-mask::$CSC_DATA"
          # Extract credentials and mask them
          CSC_LINK=$(echo $CSC_DATA | jq -r '.CSC_LINK')
          CSC_KEY_PASSWORD=$(echo $CSC_DATA | jq -r '.CSC_KEY_PASSWORD')

          # Mask sensitive values before setting them as environment variables
          echo "::add-mask::$CSC_LINK"
          echo "::add-mask::$CSC_KEY_PASSWORD"

          # Set the masked values as environment variables
          echo "CSC_LINK=$CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$CSC_KEY_PASSWORD" >> $GITHUB_ENV

      - name: Copy Frontend to Electron Directory
        run: |
          cp -r ui/dist/ui electron/

      - name: Install Dependencies and Build Electron
        run: |
          cd electron

          # Create .env file with PostHog configuration
          echo "POSTHOG_HOST=$POSTHOG_HOST" >> .env
          echo "POSTHOG_KEY=$POSTHOG_KEY" >> .env
          echo "LANGFUSE_SECRET_KEY=$LANGFUSE_SECRET_KEY" >> .env
          echo "LANGFUSE_PUBLIC_KEY=$LANGFUSE_PUBLIC_KEY" >> .env
          echo "LANGFUSE_BASE_URL=$LANGFUSE_BASE_URL" >> .env

          npm install
          npm run build
          npm run package:mac
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          POSTHOG_HOST: ${{ secrets.POSTHOG_HOST }}
          POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
          LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_BASE_URL: ${{ secrets.LANGFUSE_BASE_URL }}

      - name: Package and Upload to S3
        id: package_and_upload
        run: |
          cd electron
          VERSION=$(node -e "console.log(require('./package.json').version);")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Upload to S3 for long-term storage
          aws s3 sync dist/ "s3://${{ secrets.ELECTRON_S3_BUCKET }}/github-actions/${{ inputs.environment }}/darwin/$VERSION/${{steps.get-sha.outputs.COMMIT_SHA}}/" --exclude "dist/mac/*" --exclude "dist/mac-arm64/*"

      - name: Upload macOS Intel Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-build
          path: |
            electron/dist/*-${{ env.VERSION }}.dmg
            electron/dist/*-${{ env.VERSION }}.dmg.blockmap
            electron/dist/*-${{ env.VERSION }}-mac.zip
            electron/dist/*-${{ env.VERSION }}-mac.zip.blockmap
            electron/dist/latest-mac.yml
          retention-days: 90

      - name: Upload macOS ARM64 Build as GitHub Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-build
          path: |
            electron/dist/*-${{ env.VERSION }}-arm64.dmg
            electron/dist/*-${{ env.VERSION }}-arm64.dmg.blockmap
            electron/dist/*-${{ env.VERSION }}-arm64-mac.zip
            electron/dist/*-${{ env.VERSION }}-arm64-mac.zip.blockmap
            electron/dist/latest-mac.yml
          retention-days: 90
